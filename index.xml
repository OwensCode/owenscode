<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>What I Learned Today</title>
    <link>https://owenscode.github.io/</link>
    <description>Recent content on What I Learned Today</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 May 2019 10:02:25 -0400</lastBuildDate>
    
	<atom:link href="https://owenscode.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala call-by-name Extra</title>
      <link>https://owenscode.github.io/posts/2019/05/scala-call-by-name-extra/</link>
      <pubDate>Wed, 08 May 2019 10:02:25 -0400</pubDate>
      
      <guid>https://owenscode.github.io/posts/2019/05/scala-call-by-name-extra/</guid>
      <description>A short addendum to my last post about the call by name feature in Scala.
Something interesting about the loop function that I used is that the Java equivalent of that function would die with a StackOverflowError, but the Scala version doesn&amp;rsquo;t because it&amp;rsquo;s tail recursive and Scala is able to reuse the stack frame in each recursive call, resulting in an infinite loop instead of an error.
We can try it out by changing the loop function to not be tail recursive by incrementing the expression result by 1.</description>
    </item>
    
    <item>
      <title>Call-by-name vs call-by-value in Scala</title>
      <link>https://owenscode.github.io/posts/2019/05/scala-call-by-name/</link>
      <pubDate>Sun, 05 May 2019 13:47:57 -0400</pubDate>
      
      <guid>https://owenscode.github.io/posts/2019/05/scala-call-by-name/</guid>
      <description>One of the things I like about Scala is that I keep learning new things about the language, despite having worked with it for a while, and it&amp;rsquo;s often something useful and interesting, and sometimes just totally blows my mind.
I recently learned about call by name vs call by value, and I think this one falls into the interesting category for me, more than the useful. I&amp;rsquo;m not sure if I would&amp;rsquo;ve used it yet if I had known about it (except for some Apache Spark code I&amp;rsquo;m thinking of), but I&amp;rsquo;m pretty sure there&amp;rsquo;s some Scala library code that would&amp;rsquo;ve made more sense to me if I&amp;rsquo;d recognized the syntax.</description>
    </item>
    
    <item>
      <title>Slack Webhook Hook Problems in Airflow 1.10.3</title>
      <link>https://owenscode.github.io/posts/2019/04/slackwebhook-hook-problems/</link>
      <pubDate>Sat, 27 Apr 2019 21:22:21 -0400</pubDate>
      
      <guid>https://owenscode.github.io/posts/2019/04/slackwebhook-hook-problems/</guid>
      <description>In my last post about upgrading to Airflow 1.10.3 I mentioned working around an issue in SlackWebhookHook. This is going to be a quick description of the problem and the easy workaround.
In short, the SlackWebhookHook constructor requires the http_conn_id parameter, but was not passing it correctly to the parent class, HttpHook. HttpHook in turn uses a default connection id if one is not provided in the constructor. The end result was an error due to there being no connection with the defaulted connection id.</description>
    </item>
    
    <item>
      <title>Upgrading Airflow to 1.10.3</title>
      <link>https://owenscode.github.io/posts/2019/04/upgrading-airflow/</link>
      <pubDate>Fri, 19 Apr 2019 17:16:15 -0400</pubDate>
      
      <guid>https://owenscode.github.io/posts/2019/04/upgrading-airflow/</guid>
      <description>Last month I described the challenges posed by installing Airflow on Amazon Linux, where I ended up installing from the 1.10 stable branch instead of the latest release. The Airflow team released 1.10.3 on April 10th and I decided to upgrade this week as I don&amp;rsquo;t like that we were working off a snapshot of a branch instead of an official released version. The upgrade went reasonably smoothly; the main issue I got stuck on for some time was of my own making, but there was a problem with the SlackWebHook that I had to work around.</description>
    </item>
    
    <item>
      <title>Interviews Are Tricky</title>
      <link>https://owenscode.github.io/posts/2019/04/interviews-are-tricky/</link>
      <pubDate>Mon, 08 Apr 2019 21:01:52 -0400</pubDate>
      
      <guid>https://owenscode.github.io/posts/2019/04/interviews-are-tricky/</guid>
      <description>I had an interview with a potential new client last week and was reminded how tricky interviews can be, especially if they are infrequent. My last interview was about 3 years ago, and was not very technical or demanding. I feel a little bit like I got to lean on the reputation of my company, which isn&amp;rsquo;t a great feeling. I prefer to stand on my own and lead from the front, and this time I&amp;rsquo;m not sure I would&amp;rsquo;ve gotten past an initial phone screening if I was interviewing directly for a new position.</description>
    </item>
    
    <item>
      <title>Oysters</title>
      <link>https://owenscode.github.io/posts/2019/03/oysters/</link>
      <pubDate>Sat, 30 Mar 2019 14:54:31 -0400</pubDate>
      
      <guid>https://owenscode.github.io/posts/2019/03/oysters/</guid>
      <description>I chaperoned a school field trip to an aquarium this week, and one of the things we learned is that oysters filter the water they live in. Full grown oysters can actually filter up to 50 gallons per day. That is pretty amazing for such a small creature. In addition to the nutrients they consume in the form of microscopic species, they also remove algae, dirt and some types of pollution from the water.</description>
    </item>
    
    <item>
      <title>Running Airflow With Systemd</title>
      <link>https://owenscode.github.io/posts/2019/03/running-airflow-with-systemd/</link>
      <pubDate>Sun, 24 Mar 2019 14:40:05 -0400</pubDate>
      
      <guid>https://owenscode.github.io/posts/2019/03/running-airflow-with-systemd/</guid>
      <description>The Linux system on the EC2 I&amp;rsquo;m using is similar to CentOS and uses systemd for managing system services. If you want to run Airflow as a system service so that it can be started automatically and managed by the operation system, integrating it with systemd is a good option and is not difficult to do.
The Airflow project documentation provides the basic information needed for running Airflow with systemd, which makes setup relatively easy, but I felt that the instructions could be a little clearer and I needed to tweak a few things to get it working for my installation.</description>
    </item>
    
    <item>
      <title>Airflow on amazonlinux</title>
      <link>https://owenscode.github.io/posts/2019/03/airflow-on-amazonlinux/</link>
      <pubDate>Sat, 16 Mar 2019 07:36:56 -0400</pubDate>
      
      <guid>https://owenscode.github.io/posts/2019/03/airflow-on-amazonlinux/</guid>
      <description>I spent some time yesterday installing Apache Airflow in a Docker container, using an image based on the amazonlinux image provided by Amazon. The end goal is to run it in an EC2 instance, but while I was waiting for the ops team to create one for me, I decided to experiment with setting it up in Docker. Using the amazonlinux image should give me a similar environment to what I can expect on the EC2.</description>
    </item>
    
    <item>
      <title>Static Site Generators</title>
      <link>https://owenscode.github.io/posts/2019/03/static-site-generation/</link>
      <pubDate>Tue, 12 Mar 2019 21:33:39 -0400</pubDate>
      
      <guid>https://owenscode.github.io/posts/2019/03/static-site-generation/</guid>
      <description>Today I learned that there are a lot of static site generators out there. It&amp;rsquo;s apparently something that has gained a lot of interest. I&amp;rsquo;m mainly interested in generating my content from Markdown files, so at least that gave me somewhere to start when narrowing down the list to try. I&amp;rsquo;m interested in static site generation after my experience with a Movable Type blog I had at some point, which could publish static html content and as a result loaded really fast.</description>
    </item>
    
  </channel>
</rss>